# from aiogram import Router, types
# from aiogram.filters import CommandStart
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
# from lesson2.db.queries import find_products
# from lesson2.utils.formatters import format_product
# from rapidfuzz import fuzz
#
# router = Router()
# user_states = {}
#
# main_menu = ReplyKeyboardMarkup(keyboard=[
#     [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞")],
#     [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")]
# ], resize_keyboard=True)
#
# @router.message(CommandStart())
# async def start_handler(message: types.Message):
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
#         reply_markup=main_menu
#     )
#
#
# @router.message(lambda msg: msg.text == "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞")
# async def ask_product_name(message: types.Message):
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
#
#
# @router.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
# async def categories_handler(message: types.Message):
#     await message.answer("üîß –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
#
#
# @router.callback_query(lambda call: call.data == "more")
# async def show_more(call: types.CallbackQuery):
#     state = user_states.get(call.from_user.id)
#
#     if not state:
#         await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#         return
#
#     offset = state["offset"]
#     results = state["results"]
#
#     next_batch = results[offset:offset + 5]
#     if not next_batch:
#         await call.message.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
#         return
#
#     for prod in next_batch:
#         await call.message.answer(format_product(prod))
#
#     state["offset"] += 5
#
#     if state["offset"] < len(results):
# #         –ï—â–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ
#         keyboard = InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="more")]
#         ])
#         await call.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=keyboard)
#     else:
#         await call.message.answer("‚úÖ –≠—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å.")
#
#
# @router.message()
# async def search_handler(message: types.Message):
#     query = message.text
#     results = find_products(query)
#
#     if results:
#         best_match = results[0]
#
#         if fuzz.partial_ratio(query.lower(), best_match['title'].lower()) < 90:
#             keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                 [InlineKeyboardButton(text="–î–∞", callback_data="confirm_match")],
#                 [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="calcel_match")]
#             ])
#             user_states[message.from_user.id] = {
#                 "query": query,
#                 "offset": 0,
#                 "results": results,
#                 "suggeted": best_match
#             }
#             await message.answer(
#                 f"–í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {best_match['title']}?"
#             )
#             return
#
#         user_states[message.from_user.id] = {
#             "query": query,
#             "offset": 5,
#             "results": results
#         }
#
#         for prod in results[:5]:
#             await message.answer(format_product(prod))
#
#         user_states[message.from_user.id]["offset"] += 5
#         print(results)
#         if len(results) > 5:
#             keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                 [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="more")]
#             ])
#             await message.answer("–ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", reply_markup=keyboard)
#     else:
#         await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
#
# def register_handlers(dp):
#     dp.include_router(router)

from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from lesson2.db.queries import find_products
from lesson2.utils.formatters import format_product
from rapidfuzz import fuzz

router = Router()
user_states = {}
# –¢—É—Ç –±—É–¥—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∏–º–µ–ª –≤ –≤–∏–¥—É
user_confirmed_matches = {}

main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞")],
    [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")]
], resize_keyboard=True)


@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
        reply_markup=main_menu
    )


@router.message(lambda msg: msg.text == "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞")
async def ask_product_name(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")


@router.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
async def categories_handler(message: types.Message):
    await message.answer("üîß –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@router.callback_query(lambda call: call.data == "more")
async def show_more(call: types.CallbackQuery):
    state = user_states.get(call.from_user.id)

    if not state:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    offset = state["offset"]
    results = state["results"]

    next_batch = results[offset:offset + 5]
    if not next_batch:
        await call.message.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
        return

    for prod in next_batch:
        await call.message.answer(format_product(prod))

    state["offset"] += 5

    if state["offset"] < len(results):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="more")]
        ])
        await call.message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=keyboard)
    else:
        await call.message.answer("‚úÖ –≠—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å.")


@router.callback_query(lambda call: call.data == "confirm_match")
async def confirm_match(call: types.CallbackQuery):
    user_id = call.from_user.id
    state = user_states.get(user_id)
    if not state:
        await call.message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        return

    suggested = state["suggested"]
    original_query = state["query"]

    # üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    user_confirmed_matches.setdefault(user_id, {})[original_query.lower()] = suggested

    results = state["results"]
    await call.message.answer(f"üî¢ –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
    for prod in results[:5]:
        await call.message.answer(format_product(prod))

    state["offset"] = 5

    if len(results) > 5:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="more")]
        ])
        await call.message.answer("–ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", reply_markup=keyboard)


@router.callback_query(lambda call: call.data == "cancel_match")
async def cancel_match(call: types.CallbackQuery):
    await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–Ω–∞—á–µ.")


@router.message()
async def search_handler(message: types.Message):
    query = message.text
    user_id = message.from_user.id
    lower_query = query.lower()

    results = find_products(query)

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª —ç—Ç–æ —Å–ª–æ–≤–æ —Ä–∞–Ω—å—à–µ ‚Äî –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
    if user_id in user_confirmed_matches and lower_query in user_confirmed_matches[user_id]:
        confirmed_title = user_confirmed_matches[user_id][lower_query]
        # —Å—Ç–∞–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞—á–∞–ª–æ
        results = [r for r in results if r["title"] == confirmed_title] + [r for r in results if r["title"] != confirmed_title]

    else:
        # üí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å
        best_match = results[0]
        similarity = fuzz.partial_ratio(query.lower(), best_match["title"].lower())
        if similarity < 90:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="confirm_match")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_match")]
            ])
            user_states[user_id] = {
                "query": query,
                "offset": 0,
                "results": results,
                "suggested": best_match["title"]
            }
            await message.answer(
                f"üîé –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: *{best_match['title']}*?",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return

    # üü© –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    user_states[user_id] = {
        "query": query,
        "offset": 5,
        "results": results
    }

    await message.answer(f"üî¢ –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:")

    for prod in results[:5]:
        await message.answer(format_product(prod))

    if len(results) > 5:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="more")]
        ])
        await message.answer("–ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", reply_markup=keyboard)



def register_handlers(dp):
    dp.include_router(router)
